import fetch from 'node-fetch';
import fs from 'fs';
import path from 'path';

const testHlsStreaming = async (baseUrl = 'http://localhost:3000') => {
    try {
        console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HLS —Å—Ç—Ä–∏–º–∏–Ω–≥–∞...\n');
        
        // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ master.m3u8
        console.log('üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º master.m3u8...');
        const masterResponse = await fetch(`${baseUrl}/hls/stream/master.m3u8`);
        if (!masterResponse.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è master.m3u8: ${masterResponse.status}`);
        }
        
        const contentType = masterResponse.headers.get('content-type');
        if (!contentType?.includes('application/vnd.apple.mpegurl')) {
            throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π Content-Type: ${contentType}`);
        }
        
        const masterContent = await masterResponse.text();
        if (!masterContent.includes('720p.m3u8') || !masterContent.includes('1080p.m3u8')) {
            throw new Error('master.m3u8 –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ñ–∞–π–ª—ã –∫–∞—á–µ—Å—Ç–≤–∞');
        }
        console.log('‚úÖ master.m3u8 —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω\n');

        // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞
        console.log('üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–ª–µ–π–ª–∏—Å—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞...');
        const qualities = ['720p', '1080p'];
        for (const quality of qualities) {
            const playlistResponse = await fetch(`${baseUrl}/hls/stream/${quality}.m3u8`);
            if (!playlistResponse.ok) {
                throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ${quality}.m3u8: ${playlistResponse.status}`);
            }
            
            const playlistContent = await playlistResponse.text();
            if (!playlistContent.includes('.ts')) {
                throw new Error(`${quality}.m3u8 –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç TS —Å–µ–≥–º–µ–Ω—Ç–æ–≤`);
            }
        }
        console.log('‚úÖ –ü–ª–µ–π–ª–∏—Å—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω\n');

        // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ TS —Å–µ–≥–º–µ–Ω—Ç–æ–≤
        console.log('üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º TS —Å–µ–≥–º–µ–Ω—Ç—ã...');
        const tsResponse = await fetch(`${baseUrl}/hls/stream/720p_000.ts`);
        if (!tsResponse.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è TS —Å–µ–≥–º–µ–Ω—Ç–∞: ${tsResponse.status}`);
        }
        
        const tsContentType = tsResponse.headers.get('content-type');
        if (!tsContentType?.includes('video/MP2T')) {
            throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π Content-Type –¥–ª—è TS: ${tsContentType}`);
        }
        console.log('‚úÖ TS —Å–µ–≥–º–µ–Ω—Ç—ã —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω\n');

        // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ CORS
        console.log('üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º CORS...');
        const corsHeader = masterResponse.headers.get('access-control-allow-origin');
        if (corsHeader !== '*') {
            throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–µ CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏: ${corsHeader}`);
        }
        console.log('‚úÖ CORS —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω\n');

        console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!');

    } catch (error) {
        console.error('‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω:', error.message);
        throw error;
    }
};

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testHlsStreaming()
    .then(() => console.log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ'))
    .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error));